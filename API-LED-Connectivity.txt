1. What is API LED Connectivity, and how it is implemented in your Project
   Divding a problem statement into three layers of APIs during Mulesoft development.
   Three Layers: 
   Experience Layer (EXP): Client facing application, this will be exposed public port (CloudHub or VPCs)
                           We apply policies on top of Experience Layer.
						   
   Process Layer (PRC): Core Business Logic Written (Transformation)
   System Layer (SYS): Logic related to connecting to Backend Systems

   
2. If you use three layer architecture, I can directly hit PRC or SYS APi right ? Why do we need EXP layer?
   EXP Layer will be exposed to Client Application over Public Port. 
   PRC and SYS APIs will be using Private Port.
   
   This settings can be configured using Firewall Rules in VPCs (Runtime Manager)
   So, only EXP API will be accessible from outside Anypoint Platform
   
3. How to you Report or Propagate or Handle Errors in Layered architecture or API LED architecture ?
   In our project, we have a written Common Library.
   In Common Library we have written Global Error Handler, which can Catch expections from all Layers and Carry forward those expections,
   back to client.
   
   Whenerver there is an Error in any layer, and if the control is going back calling API.
   Mule Error Handler, will put the error response from PRC api to error.errorMessage.payload, so that EXP layer can capture from that.
   
   Which means, you need to catch exceptions in all layers and read for error.errorMessage.payload.
   
4. How can you streamline or control traffic to your APIs
   Apply Rate Limiting Policiy on top your EXP API
   Ex: 100 Requests Per Minute
   
5. What is the difference between Throttling (Spike Control) and Rate Limiting Policy
   Rate Limiting: If you receive excess requests, more than what we have configured in policy, the excess will be rejected or discarded
   Throttling (Spike Control): It will accept Maximum Number of Requests that I have configured in Policiy, But
   whatever the excess requests is has received, it will not reject or discard straight away, it will wait until the OnGoing requests are completed
   and then forward the excess requests for processing.